83af2dcb (Colin Canonaco 2022-10-04 12:50:27 -0400  5) To commit: In the highest level directory in the project on your machine do "git add ." to add any files changed by you or godot in response to things you did.
bd15fb15 (Colin Canonaco 2022-09-22 13:13:24 -0400 14) 
cae7fa97 (Colin Canonaco 2022-09-26 23:59:08 -0400 15) ## Game Design
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 16) - ***Constraints***
cae7fa97 (Colin Canonaco 2022-09-26 23:59:08 -0400 17)   - Short game loop
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 18)     - The game needs to have a game loop that can be experienced in a substantial quantity in a few minutes (in the time we can present the game)
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 19)       - Tournament bracket for multiple fights with similar base functionality
cae7fa97 (Colin Canonaco 2022-09-26 23:59:08 -0400 20)     - Other parts of the game may be well served to be understood without much demonstration
cae7fa97 (Colin Canonaco 2022-09-26 23:59:08 -0400 21)       - "In our game we also have a progression system, a short campaign with exploration..."
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 22)   - Requires minimal onboarding
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 23)     - Very transparent game mechanics (no hidden stats)
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 24)     - Simple set of actions for player
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 25)   - Reuse assets
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 26)     - Diminishing returns with creating additional sprites
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 27)     - Recoloring (one sprite can represent different types)
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 28) - ***Game Loop***
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 29)   - Game consists of the player trying to advance through a tournament bracket
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 30)   - Player customizes their beast(s) before each tournament
cae7fa97 (Colin Canonaco 2022-09-26 23:59:08 -0400 31)     - Cards?
cae7fa97 (Colin Canonaco 2022-09-26 23:59:08 -0400 32)     - Skill points?
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 33)     - See opponents' lineups?
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 34)   - Player fights through bracket
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 35)     - Damage to beast/team persists through tournament? Have to strategize usage of resources?
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 36)     - Each fight is isolated? Customization before each fight?
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 37)   - Earn more beasts/abilities after each tournament? Access harder tournaments? Save playthrough information to file to load at another time?
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 38) - ***Fights***
cae7fa97 (Colin Canonaco 2022-09-26 23:59:08 -0400 39)   - Players (and computers) take turns performing actions
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 40)   - Minigames like in Undertale combat
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 41)     - Create a mix of turn-based and real-time gameplay
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 42)   - Minimal to no RNG
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 43)     - Quick time events/minigames as alternative for strength modifiers (favor player agency)
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 44)   - Attacks have simple stats/effects
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 45)     - Label attacks with difficulty of minigame/quick time events? Stronger attacks have harder minigames/quick time events?
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 46) - ***Scenes***
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 47)   - Main menu
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 48)     - Play, options, credits, quit
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 49)   - Beast customization
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 50)     - Select beast, type, move set, skill categories
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 51)   - Bracket
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 52)     - Short animation of moving up in bracket
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 53)     - Display randomly generated opposing beasts
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 54)     - Button to enter fight
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 55)     - Transition between fight and bracket
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 56)   - Fight
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 57)     - Display involved beasts, attack options
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 58) - ***Stretch***
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 59)   - Campaign/adventure like Pokemon
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 60)   - More sprites/abilties
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 61)   - Different tournament formats other than bo1 single elimination
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 62)   - More fight quick times/mini games. More exclusive to abilities
ef021f9e (ColinC5        2022-09-29 00:25:34 -0400 63)   - Difficulty settings
83af2dcb (Colin Canonaco 2022-10-04 12:50:27 -0400 64) 
83af2dcb (Colin Canonaco 2022-10-04 12:50:27 -0400 65) ## Functionality
83af2dcb (Colin Canonaco 2022-10-04 12:50:27 -0400 66) ### Fights
83af2dcb (Colin Canonaco 2022-10-04 12:50:27 -0400 67) The Fight scene instantiates two Fighter nodes so one is controlled by the player and the other by the computer. The Fighter nodes are instantiated with a beast texture and information about the beast.
83af2dcb (Colin Canonaco 2022-10-04 12:50:27 -0400 68) Players can choose their beast/type as well as four attacks. Available types to choose from depend on the beast and attacks available depend on the beast and type.
83af2dcb (Colin Canonaco 2022-10-04 12:50:27 -0400 69) Base stats (hp, armor, type...) for all beasts will be stored in one text file in a specific format. Making a program to modify this file may be helpful.
83af2dcb (Colin Canonaco 2022-10-04 12:50:27 -0400 70) Information about attacks will all be stored in another similar text tile.
83af2dcb (Colin Canonaco 2022-10-04 12:50:27 -0400 71) Information in these files will be coded with positive integer identifiers which will correspond to the order in which the beast/type/attack information appears in its resective file.
83af2dcb (Colin Canonaco 2022-10-04 12:50:27 -0400 72) 
83af2dcb (Colin Canonaco 2022-10-04 12:50:27 -0400 73) The beast, type, and attacks are chosen in menus before the Fight scene starts. The identifiers for the chosen stats will be passed from the menus to the Fight scene script, which will then pass the appropriate information to the initialization function in the Player and Opponent Fighter nodes. The Fighter nodes will then set their information.
83af2dcb (Colin Canonaco 2022-10-04 12:50:27 -0400 74) 
1c38e617 (ColinC5        2022-10-04 12:51:49 -0400 75) The information about attacks will be stored in their respective Fighter nodes. When an attack is sent the information on that attack will be sent to the Fight scene script which will calculate the result of the attack and will update the defending Fighter.
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400  1) using Godot;
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400  2) using System;
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400  3) 
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400  4) public class Fighter : Sprite
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400  5) {
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400  6)   string controller; // fighter is controlled by player or the opponent (computer)
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400  7)   int health; // current health
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400  8)   int maxHealth; // max health
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400  9)   int[] attackStats = new int[4]; // attack damage for the 4 different attacks
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 10)   public Sprite texture;
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 11)   Texture tex;
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 12) 
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 13)   /*
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 14)   initialize as player or opponent and load stats
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 15)   controller: what controls this fighter, "player" or "opponent"  
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 16)   attackSet: array of attack IDs indicating what attacks this fighter has
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 17)   maxHealth: maximum health value
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 18)   */
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 19)   public void Init(string controller, int[] attackSet, int maxHealth) {
eaf59ad5 (Colin Canonaco 2022-10-01 21:54:58 -0400 20)     int i;
eaf59ad5 (Colin Canonaco 2022-10-01 21:54:58 -0400 21)     
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 22)     tex = ResourceLoader.Load("res://Assets/Character Sprites/Auril-1.png") as Texture;
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 23)     GetNode<Sprite>("Texture").Texture = tex;
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 24) 
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 25)     // Load attack identifiers
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 26)     this.controller = controller;
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 27)     this.maxHealth = maxHealth;
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 28)     health = maxHealth;
eaf59ad5 (Colin Canonaco 2022-10-01 21:54:58 -0400 29)     for (i = 0; i < attackSet.Length; i++) {
eaf59ad5 (Colin Canonaco 2022-10-01 21:54:58 -0400 30)       attackStats[i] = attackSet[i];
eaf59ad5 (Colin Canonaco 2022-10-01 21:54:58 -0400 31)     }
eaf59ad5 (Colin Canonaco 2022-10-01 21:54:58 -0400 32)     
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 33) 
eaf59ad5 (Colin Canonaco 2022-10-01 21:54:58 -0400 34)     // debugging
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 35)     GD.Print("controller: ", controller);
eaf59ad5 (Colin Canonaco 2022-10-01 21:54:58 -0400 36)     for (i = 0; i < attackSet.Length; i++) {
eaf59ad5 (Colin Canonaco 2022-10-01 21:54:58 -0400 37)       GD.Print("attack", i, ": ", attackSet[i]);
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 38)     }
eaf59ad5 (Colin Canonaco 2022-10-01 21:54:58 -0400 39)   }
eaf59ad5 (Colin Canonaco 2022-10-01 21:54:58 -0400 40) 
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 41)   /*
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 42)   Return how much damage an attack does
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 43)   attackID: ID of the attack
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 44)   return: Damage value of attack
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 45)   */
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 46)   public int GetAttackStrength(int attackID) {
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 47)     return attackStats[attackID];
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 48)   }
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 49) 
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 50)   /*
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 51)   Return this fighter's current health value
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 52)   Return: Fighter's current health value
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 53)   */
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 54)   public int GetHealth() {
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 55)     return health;
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 56)   }
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 57) 
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 58)   /*
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 59)   Reduce this fighter's health by a given amount
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 60)   damage: How much to reduce the fighter's health by
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 61)   return: Resulting health value
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 62)   */
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 63)   public int ReduceHealth(int damage) {
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 64)     if (damage >= health) {
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 65)       health = 0;
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 66)     }
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 67)     else {
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 68)       health -= damage;
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 69)     }
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 70) 
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 71)     return health;
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 72)   }
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 73) 
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 74)   // Called when the node enters the scene tree for the first time.
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 75)   public override void _Ready()
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 76)   {
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 77)     
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 78)   }
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 79) 
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 80) //  // Called every frame. 'delta' is the elapsed time since the previous frame.
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 81) //  public override void _Process(float delta)
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 82) //  {
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 83) //    
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 84) //  }
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400 85) }
3a74f5b5 (Colin Canonaco 2022-09-27 13:27:53 -0400  1) using Godot;
3a74f5b5 (Colin Canonaco 2022-09-27 13:27:53 -0400  2) using System;
3a74f5b5 (Colin Canonaco 2022-09-27 13:27:53 -0400  3) 
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400  4) public class Fight : Node
3a74f5b5 (Colin Canonaco 2022-09-27 13:27:53 -0400  5) {
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400  6) #pragma warning disable 649
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400  7)   [Export]
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400  8)   public PackedScene Fighter;
5c975a56 (Colin Canonaco 2022-09-30 00:39:46 -0400  9) #pragma warning restore 649
3a74f5b5 (Colin Canonaco 2022-09-27 13:27:53 -0400 10) 
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 11)   int playerMaxHealth, opponentMaxHealth;
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 12)   Fighter player, opponent;
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 13)   Texture playerTexture, opponentTexture;
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 14)   
3a74f5b5 (Colin Canonaco 2022-09-27 13:27:53 -0400 15)   // Called when the node enters the scene tree for the first time.
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 16)   public override void _Ready() {
eaf59ad5 (Colin Canonaco 2022-10-01 21:54:58 -0400 17)     int[] attackSet = new int[4];
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 18)     playerMaxHealth = 100;
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 19)     opponentMaxHealth = 132;
eaf59ad5 (Colin Canonaco 2022-10-01 21:54:58 -0400 20) 
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 21)     /* Initialize player character */
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 22) 
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 23)     player = (Fighter)Fighter.Instance();
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 24)     AddChild(player);
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 25)     playerTexture = ResourceLoader.Load("res://Assets/Character Sprites/Auril-1.png") as Texture;
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 26)     player.GetNode<Sprite>("Texture").Texture = playerTexture;
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 27)     player.Position = new Vector2(190, 280);
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 28)     player.Scale = new Vector2(6, 6);
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 29)     attackSet = new int[] {1, 2, 13, 50};
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 30)     player.Init("player", attackSet, playerMaxHealth);
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 31) 
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 32)     /* Initialize opponent character */
eaf59ad5 (Colin Canonaco 2022-10-01 21:54:58 -0400 33) 
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 34)     opponent = (Fighter)Fighter.Instance();
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 35)     AddChild(opponent);
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 36)     opponentTexture = ResourceLoader.Load("res://Assets/Character Sprites/Alzrius-1.png") as Texture;
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 37)     opponent.GetNode<Sprite>("Texture").Texture = opponentTexture;
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 38)     opponent.Position = new Vector2(850, 170);
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 39)     opponent.Scale = new Vector2(6, 6);
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 40)     attackSet = new int[] {2, 4, 3, 1};
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 41)     opponent.Init("opponent", attackSet, opponentMaxHealth);
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 42) 
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 43)     // debug
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 44)     GD.Print("oppoonent health: ", opponent.GetHealth());
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 45)   }
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 46) 
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 47)   // Called every frame. 'delta' is the elapsed time since the previous frame.
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 48)   public override void _Process(float delta)
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 49)   {
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 50)     /* End fight once a beast is defeated */
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 51) 
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 52)     if (player.GetHealth() <= 0) {
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 53)       GetTree().ChangeScene("res://Bracket/Bracket.tscn");
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 54)     }
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 55)     else if (opponent.GetHealth() <= 0) {
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 56)       GetTree().ChangeScene("res://Bracket/Bracket.tscn");
3a74f5b5 (Colin Canonaco 2022-09-27 13:27:53 -0400 57)     }
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 58)   }
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 59) 
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 60)   /* Signals */
3a74f5b5 (Colin Canonaco 2022-09-27 13:27:53 -0400 61) 
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 62)   private void _on_B0_pressed() {
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 63)     GD.Print("player attack 0 to opponent. opponent health remaining: ", opponent.ReduceHealth(player.GetAttackStrength(0)));
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 64)   }
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 65) 
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 66)   private void _on_B1_pressed() {
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 67)     GD.Print("player attack 1 to opponent. opponent health remaining: ", opponent.ReduceHealth(player.GetAttackStrength(1)));
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 68)   }
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 69) 
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 70)   private void _on_B2_pressed() {
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 71)     GD.Print("player attack 2 to opponent. opponent health remaining: ", opponent.ReduceHealth(player.GetAttackStrength(2)));
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 72)   }
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 73) 
57a15b7e (Colin Canonaco 2022-10-09 19:30:19 -0400 74)   private void _on_B3_pressed() {
9aff8fac (Colin Canonaco 2022-10-10 23:24:27 -0400 75)     GD.Print("player attack 3 to opponent. opponent health remaining: ", opponent.ReduceHealth(player.GetAttackStrength(3)));
eee57456 (Colin Canonaco 2022-10-06 00:12:35 -0400 76)   }
3a74f5b5 (Colin Canonaco 2022-09-27 13:27:53 -0400 77) }
